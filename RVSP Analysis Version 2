USE imbd;

/* Now that you have imported the data sets, let’s explore some of the tables. 
 To begin with, it is beneficial to know the shape of the tables and whether any column has null values.
 Further in this segment, you will take a look at 'movies' and 'genre' tables.*/
 
 #-----------------SEGMENT 1-----------------------------------------------
 # Question 1 : Q1. Find the total number of rows in each table of the schema?
 
 # Query :
 
-- Table: Movie
SELECT Count(*) AS Number_of_rows_in_Movie
FROM   movie; 

#Output : 7997
    
-- Table: Genre
SELECT Count(*) AS Number_of_rows_in_Genre
FROM   genre;

#Output : 14662

-- Table: Names
SELECT Count(*) AS Number_of_rows_in_Names
FROM   actor_names; 

#Output : 25725
    
-- Table: Director_mapping
SELECT Count(*) AS Number_of_rows_in_Director_mapping
FROM   director_mapping; 

#Output : 3867
    
-- Table: Role_mapping
SELECT Count(*) AS Number_of_rows_in_Role_mapping
FROM   role_mapping; 

#Output : 15615
    
-- Table: ratings
SELECT Count(*) AS Number_of_rows_in_Ratings
FROM   ratings; 

#Output : 7997

/*There are five tables(director_mapping, genre, movie,names,ratings, role_mapping)
 in IMDB DataBase.*/
 
 #--------------------SEGMENT 2 -------------------------------
 
 -- Q2. Which columns in the MOVIE table have null values?(country, worlwide_gross_income, languages, production_company)
-- Type your code below:
SELECT * FROM movie
LIMIT 5; 

SELECT CASE WHEN SUM(
		CASE WHEN id IS NULL THEN 1 ELSE 0 END) = 0  THEN 'NULL FREE COLUMN' ELSE 'Null is There' END AS id,
        
        CASE WHEN SUM(
		CASE WHEN title IS NULL THEN 1 ELSE 0 END) = 0 THEN 'Null Is There In the Columns' ELSE 'Null Free Columns' END AS title,
        
		CASE WHEN SUM(
		CASE WHEN year IS NULL THEN 1 ELSE 0 END) = 0 THEN 'Null Is There In the Columns' ELSE 'Null Free Columns' END AS year,
        
        CASE WHEN SUM(
		CASE WHEN date_published IS NULL THEN 1 ELSE 0 END) = 0 THEN 'Null Is There In the Columns' ELSE 'Null Free Columns' END AS date_published,
        
        CASE WHEN SUM(
		CASE WHEN duration IS NULL THEN 1 ELSE 0 END) = 0 THEN 'Null Is There In the Columns' ELSE 'Null Free Columns' END AS duration,
        
        CASE WHEN SUM(
		CASE WHEN country IS NULL THEN 1 ELSE 0 END) = 0 THEN 'Null Is There In the Columns' ELSE 'Null Free Columns' END AS country,
        
        CASE WHEN SUM(
		CASE WHEN worlwide_gross_income IS NULL THEN 1 ELSE 0 END) = 0 THEN 'Null Is There In the Columns' ELSE 'Null Free Columns' END AS worlwide_gross_income,
        
        CASE WHEN SUM(
		CASE WHEN languages IS NULL THEN 1 ELSE 0 END) = 0 THEN 'Null Is There In the Columns' ELSE 'Null Free Columns' END AS languages,
        
        CASE WHEN SUM(
		CASE WHEN production_company IS NULL THEN 1 ELSE 0 END) = 0 THEN 'Null Is There In the Columns' ELSE 'Null Free Columns' END AS production_company
FROM movie;

/*Movie table has nine columns : id ,title, year, date_published date, duration, country, worlwide_gross_income, languages, production_company.

#------------------SEGMENT 3 -----------------------------------------------------------------------------------------------------------------------------------
-- Now as you can see four columns of the movie table has null values(column:title,year,date_published,duration). 

-- Let's look at the at the movies released each year. 

--------------------------------------------------------------------------------------------------------------------------
-- Q3. Find the total number of movies released each year? How does the trend look month wise? (Output expected)

/* Output format for the first part:

+---------------+-------------------+
| Year			|	number_of_movies|
+-------------------+----------------
|	2017		|	2134			|
|	2018		|		.			|
|	2019		|		.			|
+---------------+-------------------+


Output format for the second part of the question:
+---------------+-------------------+
|	month_num	|	number_of_movies|
+---------------+----------------
|	1			|	 134			|
|	2			|	 231			|
|	.			|		.			|
+---------------+-------------------+ */

#Query : -- Type your code below:
-- Year wise:

SELECT year,COUNT(id) Movie_count FROM movie
GROUP BY year;

# Insights: In 2017 ,Most if the Movies are released as compare to 2018 & 19.

----------------------------------------------------------------------------------------
-- Month Wise:
SELECT MONTH(date_published) ,COUNT(id) FROM movie GROUP BY MONTH(date_published) ORDER BY COUNT(id) DESC;


-- Q : 5 Month out of Year when Most of the Movies are Released

--------------------------------------------------------------------------
SELECT CASE MONTH(date_published)
			WHEN 1 THEN 'JAN'
            WHEN 2 THEN 'FEB'
            WHEN 3 THEN 'MAR'
            WHEN 4 THEN 'APR'
            WHEN 5 THEN 'MAY'
            WHEN 6 THEN 'JUN'
            WHEN 7 THEN 'JULY'
            WHEN 8 THEN 'AUG'
            WHEN 9 THEN 'SEPT'
            WHEN 10 THEN 'OCT'
            WHEN 11 THEN 'NOV'
            ELSE 'DEC' END
 as Month,COUNT(id) as Movie_Counts FROM movie
GROUP BY CASE MONTH(date_published)
			WHEN 1 THEN 'JAN'
            WHEN 2 THEN 'FEB'
            WHEN 3 THEN 'MAR'
            WHEN 4 THEN 'APR'
            WHEN 5 THEN 'MAY'
            WHEN 6 THEN 'JUN'
            WHEN 7 THEN 'JULY'
            WHEN 8 THEN 'AUG'
            WHEN 9 THEN 'SEPT'
            WHEN 10 THEN 'OCT'
            WHEN 11 THEN 'NOV'
            ELSE 'DEC' END
ORDER BY Movie_Counts DESC
LIMIT 5;

#INSIGHTS:  Most of the Movies where release in "MARCH"  Followeed by SEPT,JAN OCT and APRIL



----------------------------------------------------------------------------------------------------
/*
So, now that you have understood the month-wise trend of movies, let’s take a look at the other details in the movies table. 
We know USA and India produces huge number of movies each year. Lets find the number of movies produced by USA or India for the last year.

*/

-- Q4. How many movies were produced in the USA or India in the year 2019??
-- Total Movies produced in india and USA in the year of 2019:

SELECT COUNT(id) AS 'Movies by India or USA'
FROM movie
WHERE (
    UPPER(country) REGEXP '(^|,\\s*)INDIA(,|$)'
    OR
    UPPER(country) REGEXP '(^|,\\s*)USA(,|$)'
)
AND year = 2019;

/* USA and India produced more than a thousand movies(you know the exact number!) in the year 2019.
Exploring table Genre would be fun!! 
Let’s find out the different genres in the dataset.*/
#-----------------------------------------------------------------------------------------------------------------------

-- Q5. Find the unique list of the genres present in the data set?
#---------------------------------------------------------------------------------------------------------------------------
SELECT DISTINCT(genre) FROM genre; # List of Genre
SELECT COUNT(DISTINCT(genre)) FROM genre; # Ouput 13 Unique Genre

#-------------------------------------------------------------------------------------------------------------------
/* So, RSVP Movies plans to make a movie of one of these genres.
Now, wouldn’t you want to know which genre had the highest number of movies produced in the last year?
Combining both the movie and genres table can give more interesting insights. */

-- Using SubQuery
SELECT Genre_Name,Total_Genre
FROM(
	SELECT genre as Genre_Name,COUNT(id) as Total_Genre FROM genre g
	INNER JOIN movie m
	ON m.id = g.movie_id
	GROUP BY genre)
Result
ORDER BY Total_Genre DESC
LIMIT 1;

/* So, based on the insight that you just drew, RSVP Movies should focus on the ‘Drama’ genre. 
But wait, it is too early to decide. A movie can belong to two or more genres. 
So, let’s find out the count of movies that belong to only one genre.*/
--------------------------------------------------------------
-- Q7. How many movies belong to only one genre?

#-- -----------------------------------------------------------

#In Our Table one movie ID may contain more than one genre, So we wil count the Movie id which must be available in genre and Only available at once
# at once means only one genre is mentioned for the Movie id, we filter the Movie id which is available at once only and SUM that filtered to get the answer.
WITH Movie_count AS 
(
	SELECT movie_id,COUNT(*) as Number_of_Movies
	FROM movie m 
	INNER JOIN genre g
	ON g.movie_id = m.id
	GROUP BY movie_id
	HAVING COUNT(*) =1)
 SELECT SUM(Number_of_Movies)  FROM Movie_count
 
 #--------------------------------------------------------------------------------------------------
 /* There are more than three thousand movies which has only one genre associated with them.
So, this figure appears significant. 
Now, let's find out the possible duration of RSVP Movies’ next project.*/
#----------------------------------------------------------------------------------------------------------
-- Q8.What is the average duration of movies in each genre? 
-- (Note: The same movie can belong to multiple genres.)

/* Output format:

+---------------+-------------------+
| genre			|	avg_duration	|
+-------------------+----------------
|	thriller	|		105			|
|	.			|		.			|
|	.			|		.			|
+---------------+-------------------+ */
#-- Query 

SELECT genre,ROUND(AVG(duration),0) as Avg_Movie_duration FROM movie m
INNER JOIN genre g
ON g.movie_id =m.id
GROUP BY genre
ORDER BY Avg_Movie_duration DESC;

#-- But if in the above case you want to check the Avreage duartion for one movie and its genre just once Then you can 
#go with the Below query which is filter the movie id unique and the check the average duation

SELECT genre, 
       ROUND(AVG(duration),0) AS avg_duration
FROM(
    SELECT DISTINCT movie_id, genre
    FROM genre
) as g
JOIN movie m ON g.movie_id = m.id
GROUP BY g.genre
ORDER BY avg_duration DESC;

#BUT output will be Same as Above Query

#---------------------------------------------------------------------------------
/*INSIGHTS :  Now you know, movies of genre 'Drama' (produced highest in number in 2019) has the average duration of 107 mins.
Lets find where the movies of genre 'thriller' on the basis of number of movies.*/
#-----------------------------------------------------------------------------------
-- Q9.What is the rank of the ‘thriller’ genre of movies among all the genres in terms of number of movies produced? 
-- (Hint: Use the Rank function)
SELECT * FROM (
	SELECT genre,COUNT(genre) Number_of_movies,RANK() OVER(ORDER BY COUNT(id) DESC) Genre_Rank
	FROM movie m
	INNER JOIN genre g
	ON g.movie_id = m.id
	GROUP BY genre) as Thriller_rank
WHERE lower(genre) = 'thriller'  

## INSIGHTS :Thriller movies is in top 3 among all genres in terms of number of movies (1484 movies) 

#---------------------------------------------SEGMENT 2 --------------------------------------------------------

/*In the previous segment, you analysed the movies and genres tables. 
 In this segment, you will analyse the ratings table as well.
To start with lets get the min and max values of different columns in the table*/

#----------------------------------------------------------------------------------------------------------
-- Q10.  Find the minimum and maximum values in  each column of the ratings table except the movie_id column?
/* Output format:
+---------------+-------------------+---------------------+----------------------+-----------------+-----------------+
| min_avg_rating|	max_avg_rating	|	min_total_votes   |	max_total_votes 	 |min_median_rating|min_median_rating|
+---------------+-------------------+---------------------+----------------------+-----------------+-----------------+
|		0		|			5		|	       177		  |	   2000	    		 |		0	       |	8			 |
+---------------+-------------------+---------------------+----------------------+-----------------+-----------------+*/
#-- Type your code below:
SELECT Min(avg_rating)    AS min_avg_rating,
       Max(avg_rating)    AS max_avg_rating,
       Min(total_votes)   AS min_total_votes,
       Max(total_votes)   AS max_total_votes,
       Min(median_rating) AS min_median_rating,
       Max(median_rating) AS max_median_rating
FROM   ratings;

##INSIGHT : So, the minimum and maximum values in each column of the ratings table are in the expected range.
##This implies there are no outliers in the table. 

Now, let’s find out the top 10 movies based on average rating.*/

-- Q11. Which are the top 10 movies based on average rating?
/* Output format:
+---------------+-------------------+---------------------+
| title			|		avg_rating	|		movie_rank    |
+---------------+-------------------+---------------------+
| Fan			|		9.6			|			5	  	  |
|	.			|		.			|			.		  |
|	.			|		.			|			.		  |
|	.			|		.			|			.		  |
+---------------+-------------------+---------------------+*/
-- Type your code below:
-- It's ok if RANK() or DENSE_RANK() is used too  Use Different Window function for diffrent ranking criteria.
SELECT * FROM (
	SELECT title,avg_rating,DENSE_RANK() OVER (ORDER BY avg_rating DESC) as Movie_Rank
	FROM ratings r
	LEFT JOIN movie m
	ON m.id = r.movie_id) as mr
WHERE Movie_Rank <=10  
 #                                      OR 
SELECT * FROM (
	SELECT title,avg_rating,RANK() OVER (ORDER BY avg_rating DESC) as Movie_Rank
	FROM ratings r
	LEFT JOIN movie m
	ON m.id = r.movie_id) as mr
WHERE Movie_Rank <=10   

#                       OR 
SELECT * FROM (
	SELECT title,avg_rating,ROW_NUMBER() OVER (ORDER BY avg_rating DESC) as Movie_Rank
	FROM ratings r
	LEFT JOIN movie m
	ON m.id = r.movie_id) as mr
WHERE Movie_Rank <=10

# OR WITHOIUT RANKING FUNCTION

SELECT title,avg_rating
FROM ratings r
LEFT JOIN movie m
ON m.id = r.movie_id
ORDER BY avg_rating  DESC
LIMIT 10

#------------------------------------------------------------------------------------
/* Do you find you favourite movie FAN in the top 10 movies with an average rating of 9.6? If not, please check your code again!!
So, now that you know the top 10 movies, do you think character actors and filler actors can be from these movies?
Summarising the ratings table based on the movie counts by median rating can give an excellent insight.*/

#--------------------------------------------------------------------------------------
-- Q12. Summarise the ratings table based on the movie counts by median ratings.
/* Output format:

+---------------+-------------------+
| median_rating	|	movie_count		|
+-------------------+----------------
|	1			|		105			|
|	.			|		.			|
|	.			|		.			|
+---------------+-------------------+ */
-- Order by is good to have
-- Query using rating Table:
SELECT median_rating,COUNT(movie_id) as Movie_Count
FROM ratings
GROUP BY median_rating
ORDER BY Movie_Count DESC

#INSIGHTS :  Movies with a median rating of 7 is highest in number. 

#----------------------------------------------------------------------
/*Now, let's find out the production house with which RSVP Movies can partner for its next project.*/

-- Q13. Which production house has produced the most number of hit movies (average rating > 8)??
/* Output format:
+------------------+-------------------+---------------------+
|production_company|movie_count	       |	prod_company_rank|
+------------------+-------------------+---------------------+
| The Archers	   |		1		   |			1	  	 |
+------------------+-------------------+---------------------+*/
-- Query:
SELECT * FROM (
##---------THE MAIN PART of Query:
			SELECT production_company,
				   COUNT(id) as Movie_Count,
				   RANK() OVER(ORDER BY COUNT(id) DESC) as PH_rank
				FROM ( # Filtered and Merged Table
						SELECT production_company,id,avg_rating
						FROM movie
						INNER JOIN ratings
						ON id=movie_id
						WHERE avg_rating>8
						ORDER BY avg_rating DESC) as PC
			GROUP BY production_company
			HAVING   production_company IS NOT NULL # ProductionHouse Contain Large Null Values
			ORDER BY Movie_Count  DESC ) as Main_Table
#-----------------------------
WHERE PH_rank =1;  

-- It's ok if RANK() or DENSE_RANK() is used too
#INSIGHTS: Answer can be Dream Warrior Pictures or National Theatre Live or both 

#-----------------------------------------------------------------------------------------------
-- Q14. How many movies released in each genre during March 2017 in the USA having more than 1,000 votes?
/* Output format:

+---------------+-------------------+
| genre			|	movie_count		|
+-------------------+----------------
|	thriller	|		105			|
|	.			|		.			|
|	.			|		.			|
+---------------+-------------------+ */
# Table use : movie,genre & ratings
#Query: 

SELECT g.genre,COUNT(g.movie_id) as TotalMovieInUSA_2017 
FROM ( # FILETERED and MERGED TABLE
		SELECT * FROM ratings
		WHERE movie_id IN (	SELECT id FROM movie
							WHERE UPPER(country) REGEXP '(^|,\\s*)USA(,|$)' AND Month(date_published) = 3 AND year = 2017)
							AND total_votes > 1000
                            ) AS ft
INNER JOIN genre g
ON  g.movie_id = ft.movie_id
GROUP BY g.genre
ORDER BY  TotalMovieInUSA_2017 DESC

#-----------------OR ------------------------

SELECT genre,
       Count(movie_id) AS movie_count
FROM   genre AS g
       INNER JOIN ratings AS r using (movie_id)
       INNER JOIN movie AS m
               ON g.movie_id = m.id
WHERE  total_votes > 1000
       AND Month(date_published) = 3
       AND year = 2017
       AND UPPER(country) REGEXP '(^|,\\s*)USA(,|$)'
GROUP  BY genre
ORDER  BY movie_count DESC; 


#------------------------------------SEGMENT 3  --------------------------------------------------------

-- Lets try to analyse with a unique problem statement.
-- Q15. Find movies of each genre that start with the word ‘The’ and which have an average rating > 8?
/* Output format:
+---------------+-------------------+---------------------+
| title			|		avg_rating	|		genre	      |
+---------------+-------------------+---------------------+
| Theeran		|		8.3			|		Thriller	  |
|	.			|		.			|			.		  |
|	.			|		.			|			.		  |
|	.			|		.			|			.		  |
+---------------+-------------------+---------------------+*/
#Query:
SELECT title,avg_rating,genre FROM movie m
INNER JOIN ratings r
ON r.movie_id = m.id
INNER JOIN genre g
ON g.movie_id = m.id
WHERE title REGEXP '^The' AND avg_rating > 8

#The above will create three separate row for each genre you can for a better result lets Group the title together by 
#Aggregating all the genre of each title together and create a New average from the aggregation
#--------------MOre Perfectly-----------------------
#Query2:
SELECT title,ROUND(AVG(avg_rating),1) AS  Average_ratings,
GROUP_CONCAT(DISTINCT g.genre ORDER BY g.genre SEPARATOR ',') AS Genre 
FROM movie m
INNER JOIN ratings r
ON r.movie_id = m.id
INNER JOIN genre g
ON g.movie_id = m.id
WHERE title REGEXP '^The' AND avg_rating > 8
GROUP BY title
ORDER BY Average_ratings DESC
-- You should also try your hand at median rating and check whether the ‘median rating’ column gives any significant insights.
#----------------------------------------------------------------

-- Q16. From the movies released between 1 April 2018 and 1 April 2019, how many were given a median rating of 8?
-- Query: 

SELECT COUNT(id) Movie_btw_18_19_rated8 FROM movie m
INNER JOIN ratings r
ON r.movie_id = m.id
WHERE (date_published BETWEEN '2018-04-01' AND '2019-04-01') AND median_rating = 8

#INSIGHTS: There is 361 such movie release between april 18 to april 19 with Median rating of 8

#-------------------------------------------------------------------------------------------------

-- Once again, try to solve the problem given below.
-- Q17. Do German movies get more votes than Italian movies? 
-- Hint: Here you have to find the total number of votes for both German and Italian movies.
-- Query:
SELECT (
	SELECT SUM(total_votes) FROM movie m
	INNER JOIN ratings r
	ON r.movie_id = m.id
	WHERE UPPER(country) REGEXP '(^|,\\s*)GERMANY(,|$)') as German_votes, # COLUMN 1

	(SELECT SUM(total_votes) Italian_votes FROM movie m
	INNER JOIN ratings r
	ON r.movie_id = m.id
	WHERE UPPER(country) REGEXP '(^|,\\s*)ITALY(,|$)') as Italian_votes; #LIKE COLUMN 2

#------------------OR you may
SELECT 
	SUM(CASE WHEN UPPER(country) REGEXP '(^|,\\s*)GERMANY(,|$)' THEN total_votes ELSE 0 END) as German_Votes,#Column1
	SUM(CASE WHEN UPPER(country) REGEXP '(^|,\\s*)ITALY(,|$)' THEN total_votes ELSE 0 END) as Italian_Votes #Column2
FROM movie m
INNER JOIN ratings r
ON r.movie_id= m.id

#INSIGHTS: Yes, German movies (2026223) got more votes compared italian movies(703024)

#-------------------------------------SEGMENT 4 ----------------------------------------------------

/* Now that you have analysed the movies, genres and ratings tables, let us now analyse another table, the names table. 
Let’s begin by searching for null values in the tables.*/

#------------------------------------------------------------------------------------------------------
/*Hint: You can find null values for individual columns or follow below output format
+---------------+-------------------+---------------------+----------------------+
| name_nulls	|	height_nulls	|date_of_birth_nulls  |known_for_movies_nulls|
+---------------+-------------------+---------------------+----------------------+
|		0		|			123		|	       1234		  |	   12345	    	 |
+---------------+-------------------+---------------------+----------------------+*/

SELECT Count(id) - Count(name)             AS name_nulls, 
       Count(id) - Count(height)           AS height_nulls,
       Count(id) - Count(date_of_birth)    AS date_of_birth_nulls,
       Count(id) - Count(known_for_movies) AS known_for_movies_nulls
FROM  actor_names;

#INSIGHTS: name_nulls(0 Nulls), height_nulls(17335 nulls), date_of_birth_nulls(13431 nulls), known_for_movies_nulls(15226 nulls)
# There are no Null value in the column 'name'.

#-------------------------------------------------------------------------------------------------------------

/*The director is the most important person in a movie crew. 
Let’s find out the top three directors in the top three genres who can be hired by RSVP Movies.*/

#-----------------------------------------------------------------------------------------------

-- Q19. Who are the top three directors in the top three genres whose movies have an average rating > 8?
-- (Hint: The top three genres would have the most number of movies with an average rating > 8.)
/* Output format:

+---------------+-------------------+
| director_name	|	movie_count		|
+---------------+-------------------|
|James Mangold	|		4			|
|	.			|		.			|
|	.			|		.			|
+---------------+-------------------+ */
-- Query:
SELECT name, COUNT(r.movie_id) as MovieByDirector FROM genre g
INNER JOIN ratings r USING (movie_id)
INNER JOIN director_mapping d
ON d.movie_id = g.movie_id
INNER JOIN actor_names n
ON d.name_id = n.id
WHERE avg_rating >8 AND genre IN ('Drama','Action','Comedy')
GROUP BY d.name_id
ORDER BY COUNT(r.movie_id) DESC

#-- Top Three genre is : WE can merge this Query Inside IN ()
SELECT genre FROM genre g
INNER JOIN ratings r USING(movie_id)
WHERE r.avg_rating >8
GROUP BY genre
ORDER BY COUNT(r.movie_id) DESC
LIMIT 3

#INSIGHTS : James Mangold can be hired as the director for RSVP's next project. Do you remeber his movies, 'Logan' and 'The Wolverine'.

#---------------------------------------------------------------------------------------------------------------------------------------

#Now, let’s find out the top two actors
-- Q20. Who are the top two actors whose movies have a median rating >= 8?
/* Output format:

+---------------+-------------------+
| actor_name	|	movie_count		|
+-------------------+----------------
|Christain Bale	|		10			|
|	.			|		.			|
+---------------+-------------------+ */
-- Query : 
SELECT n.name,COUNT(m.id) FROM actor_names as n
INNER JOIN role_mapping rm
	ON rm.name_id = n.id
INNER JOIN movie m
	ON m.id =rm.movie_id
INNER JOIN ratings r USING(movie_id)
WHERE median_rating >=8
GROUP BY n.name
ORDER BY COUNT(m.id) DESC
LIMIT 2

#INSIGHTS:Have you find your favourite actor 'Mohanlal' in the list. If no, please check your code again. 

#------------------------------------------------------------------------------------------------------

/*RSVP Movies plans to partner with other global production houses. 
Let’s find out the top three production houses in the world.*/
-- Q21. Which are the top three production houses based on the number of votes received by their movies?
/* Output format:
+------------------+--------------------+---------------------+
|production_company|vote_count			|		prod_comp_rank|
+------------------+--------------------+---------------------+
| The Archers		|		830			|		1	  		  |
|	.				|		.			|			.		  |
|	.				|		.			|			.		  |
+-------------------+-------------------+---------------------+*/

#-------------------------------------------------------------------------------------------------------
 #Query:
SELECT production_company,SUM(total_votes) as Total_Votes_for_PH,
		RANK() OVER(ORDER BY SUM(total_votes) DESC) as PH_ranking
FROM movie m
	INNER JOIN ratings r
		ON r.movie_id = m.id
GROUP BY production_company
LIMIT 3
 
#INSIGHTS: Yes Marvel Studios(Votes: 2656967) rules the movie world. followed by Twentieth Century Fox and Warner Bros.
#So, these are the top three production houses based on the number of votes received by the movies they have produced.

#-----------------------------------------------------------------------------------------------------------------------
/*Since RSVP Movies is based out of Mumbai, India also wants to woo its local audience. 
RSVP Movies also wants to hire a few Indian actors for its upcoming project to give a regional feel. 
Let’s find who these actors could be.*/

#-----------------------------------------------------------------------------------------------------------------
-- Q22. Rank actors with movies released in India based on their average ratings. Which actor is at the top of the list?
-- Note: The actor should have acted in at least five Indian movies. 
-- (Hint: You should use the weighted average based on votes.
-- If the ratings clash, then the total number of votes should act as the tie breaker.)

/* Output format:
+---------------+-------------------+---------------------+----------------------+-----------------+
| actor_name	|	total_votes		|	movie_count		  |	actor_avg_rating 	 |actor_rank	   |
+---------------+-------------------+---------------------+----------------------+-----------------+
|	Yogi Babu	|			3455	|	       11		  |	   8.42	    		 |		1	       |
|		.		|			.		|	       .		  |	   .	    		 |		.	       |
|		.		|			.		|	       .		  |	   .	    		 |		.	       |
|		.		|			.		|	       .		  |	   .	    		 |		.	       |
+---------------+-------------------+---------------------+----------------------+-----------------+*/
-- Query:

SELECT name as Actor_Name,SUM(total_votes) AS Total_Votes,COUNT(m.id) AS Movie_Count,ROUND(AVG(avg_rating),2) as Weighted_Rating, 
ROW_NUMBER() OVER (ORDER BY ROUND(AVG(avg_rating),2) DESC ,SUM(total_votes) DESC) as Actor_Rank
FROM actor_names n
INNER JOIN role_mapping rm
ON rm.name_id = n.id
INNER JOIN ratings r
ON r.movie_id = rm.movie_id
INNER JOIN movie m
ON rm.movie_id = m.id
WHERE UPPER(country) REGEXP '(^|,\\s*)INDIA(,|$)'
GROUP BY name,m.id


SELECT name as Actor_Name,SUM(total_votes) AS Total_Votes,COUNT(m.id) AS Movie_Count,ROUND(SUM(avg_rating*total_votes)/SUM(total_votes),2) as Weighted_Rating, 
ROW_NUMBER() OVER (ORDER BY SUM(avg_rating*total_votes)/SUM(total_votes) DESC ,SUM(total_votes) DESC) as Actor_Rank
FROM actor_names n
INNER JOIN role_mapping rm
ON rm.name_id = n.id
INNER JOIN ratings r
ON r.movie_id = rm.movie_id
INNER JOIN movie m
ON rm.movie_id = m.id
WHERE UPPER(country) REGEXP '(^|,\\s*)INDIA(,|$)'
GROUP BY name
HAVING COUNT(m.id) >4

#----OR SAME-USING CTE MAKING THE SIMPLER ------------------------------------
#CTE QUERY
WITH actor_agg AS (
    SELECT
        n.name AS Actor_Name,
        SUM(r.total_votes) AS Total_Votes,
        COUNT(DISTINCT m.id) AS Movie_Count,
        ROUND(SUM(r.avg_rating * r.total_votes) / SUM(r.total_votes), 2) AS Weighted_Rating
    FROM actor_names n
    INNER JOIN role_mapping rm ON rm.name_id = n.id
    INNER JOIN ratings r ON r.movie_id = rm.movie_id
    INNER JOIN movie m ON rm.movie_id = m.id
    WHERE UPPER(m.country) REGEXP '(^|,\\s*)INDIA(,|$)'
    GROUP BY n.name
    HAVING COUNT(DISTINCT m.id) > 4
)
#MAIN QUERY
SELECT
    Actor_Name,
    Total_Votes,
    Movie_Count,
    Weighted_Rating,
    ROW_NUMBER() OVER (ORDER BY Weighted_Rating DESC, Total_Votes DESC) AS Actor_Rank
FROM actor_agg;

#INSIGHTS : Vijay sethupathi tops the list.Top actor is Vijay Sethupathi as per our Criteria of Topping
 #-----------------------------------------------------------------------------------------------------
 -- Q23.Find out the top five actresses in Hindi movies released in India based on their average ratings? 
-- Note: The actresses should have acted in at least three Indian movies. 
-- (Hint: You should use the weighted average based on votes. If the ratings clash, then the total number of votes should act as the tie breaker.)
/* Output format:
+---------------+-------------------+---------------------+----------------------+-----------------+
| actress_name	|	total_votes		|	movie_count		  |	actress_avg_rating 	 |actress_rank	   |
+---------------+-------------------+---------------------+----------------------+-----------------+
|	Tabu		|			3455	|	       11		  |	   8.42	    		 |		1	       |
|		.		|			.		|	       .		  |	   .	    		 |		.	       |
|		.		|			.		|	       .		  |	   .	    		 |		.	       |
|		.		|			.		|	       .		  |	   .	    		 |		.	       |
+---------------+-------------------+---------------------+----------------------+-----------------+*/
-- Output:
#CTE Table
WITH Actress_table AS (
	SELECT name as Actress_Name,SUM(total_votes) as Votes,COUNT(m.id) as Movie_Count,
				   ROUND(SUM(avg_rating*total_votes)/SUM(total_votes),2) as Weighted_Avg
FROM actor_names an
	INNER JOIN role_mapping rm
		ON rm.name_id = an.id
	INNER JOIN ratings r
		ON rm.movie_id = r.movie_id
	INNER JOIN movie m
		ON m.id = rm.movie_id
WHERE UPPER(country) REGEXP '(^|,\\s*)INDIA(,|$)' AND UPPER(languages) REGEXP '(^|,\\s*)HINDI(,|$)' AND category = 'actress'
GROUP BY name
HAVING COUNT(m.id)>2
)
# MAIN QUery
SELECT 
Actress_Name,Votes,Movie_Count,Weighted_Avg,
RANK()OVER (ORDER BY Weighted_Avg DESC ,Votes ASC) AS Actress_Ranking
FROM Actress_table

# INSIGHTS : Taapsee Pannu tops with average rating 7.74 with Votes of 18061 followed by Kriti Sanon AND Divya Dutta

#------------------------------------------------------------------------------------------------------------------

/*Now let us divide all the thriller movies in the following categories and find out their numbers.*/

# Q24. Select thriller movies as per avg rating and classify them in the following category: 
/*
			Rating > 8: Superhit movies
			Rating between 7 and 8: Hit movies
			Rating between 5 and 7: One-time-watch movies
			Rating < 5: Flop movies*/
#---------------------------------------------------------------------------------------------------------------            
#QUERY:

SELECT title,avg_rating,
CASE 
		WHEN avg_rating >8 THEN 'Superhit'
        WHEN avg_rating >=7 THEN 'Hit'
        WHEN avg_rating >=5 THEN 'One-Time Watch'
        ELSE 'Flop' END Movie_Rating,
genre FROM movie m
INNER JOIN ratings r
ON r.movie_id = m.id
INNER JOIN genre g
ON g.movie_id = m.id
WHERE LOWER(genre) = 'thriller';

#-------------------------------------------------------------------------------------------------------------
/* Until now, you have analysed various tables of the data set.
Now, you will perform some tasks that will give you a broader understanding of the data in this segment.*/

#------------------------------------SEGMENT 5------------------------------------------------------------------------
									#ADVANCE#
 -- Q25. What is the genre-wise (running total) and (moving average) of the AVERAGE movie duration? 
-- (Note: You need to show the output table in the question.) 
-- We will learn both Running total and Moving total and there diffreences
/* Output format:
+---------------+-------------------+---------------------+----------------------+
| genre			|	avg_duration	|running_total_duration|moving_avg_duration  |
+---------------+-------------------+---------------------+----------------------+
|	comdy		|			145		|	       106.2	  |	   128.42	    	 |
|		.		|			.		|	       .		  |	   .	    		 |
|		.		|			.		|	       .		  |	   .	    		 |
|		.		|			.		|	       .		  |	   .	    		 |
+---------------+-------------------+---------------------+----------------------+*/
-- Query:                                   
SELECT genre as Genre,ROUND(AVG(duration),0) as Avg_Duration,
ROUND(SUM(AVG(duration)) OVER(ORDER BY genre ROWS UNBOUNDED PRECEDING),0) AS 'Running Total(Average_Duration)', # BYfault: BETWEEN UNBOUNDED PRECEDING AND CURRENT ROW
ROUND(AVG(AVG(duration)) OVER (ORDER BY genre ROWS BETWEEN UNBOUNDED PRECEDING AND CURRENT ROW),0) AS 'Moving Average (Average_Duration)'
FROM genre g
INNER JOIN movie m
ON m.id = g.movie_id
GROUP BY genre

#INSIGHT :We are asked to do Calculation on AVG(duration) and Finding Running Total and Moving Average of (AVG(duration))

-- Round is good to have and not a must have; Same thing applies to sorting
#---------------------------------------------------------------------------------------------
-- Let us find top 5 movies of each year with top 3 genres.

-- Q26. Which are the five highest-grossing movies of each year that belong to the top three genres? 
-- (Note: The top 3 genres would have the most number of movies.)

/* Output format:
+---------------+-------------------+---------------------+----------------------+-----------------+
| genre			|	year			|	movie_name		  |worldwide_gross_income|movie_rank	   |
+---------------+-------------------+---------------------+----------------------+-----------------+
|	comedy		|			2017	|	       indian	  |	   $103244842	     |		1	       |
|		.		|			.		|	       .		  |	   .	    		 |		.	       |
|		.		|			.		|	       .		  |	   .	    		 |		.	       |
|		.		|			.		|	       .		  |	   .	    		 |		.	       |
+---------------+-------------------+---------------------+----------------------+-----------------+*/
-- Query:
#First Lets Find out the TOP 3 Genre
SELECT genre,COUNT(movie_id) FROM genre g
INNER JOIN movie m
ON m.id = g.movie_id
GROUP BY genre
ORDER BY COUNT(id) DESC

-- SO DRAMA, COMEDY and THRILLER is the TOP 3 GENRE
WITH Top_5_Movies  AS (
					SELECT title Movie_Name  ,year Release_Year,worlwide_gross_income as Box_Office_Collection,
                    genre as Top_3_Genre ,
					DENSE_RANK() OVER(PARTITION BY year ORDER BY worlwide_gross_income DESC) as Movie_Rank
                    # YOU Can USE RANK OR ROW_NUMBER as per Prblem Statement
					FROM movie m
					INNER JOIN genre g
					ON g.movie_id = m.id
					WHERE UPPER(genre) IN ('DRAMA','COMEDY','THRILLER')
                    )
SELECT  DISTINCT Movie_Name,Release_Year,
CASE 
WHEN Box_Office_Collection REGEXP '$' THEN REPLACE(Box_Office_Collection,"$","INR")
ELSE Box_Office_Collection END,#ITS INR COLLECTION MONEY OR WE MAY ALSO CONVERT THE $ = INR * STOCK EXCHNAGE PRICE
Top_3_Genre,
Movie_Rank
FROM Top_5_Movies 
WHERE Movie_Rank <6
/*#INSIGHTS :LETS talk about TOP 1 of Each Year In 2017 : Shantamanam Bhavati,
												In 2018 : THE VILLIAN,
                                                In 2019 : PRESCIENCE
                                                In 2019 : PRESCIENCE
                                                
#--------------------------------------------------------------------------------------------
-- Finally, let’s find out the names of the top two production houses that have produced the highest number of hits among multilingual movies.
-- Q27.  Which are the top two production houses that have produced the highest number of hits (median rating >= 8) among multilingual movies?
/* Output format:
+-------------------+-------------------+---------------------+
|production_company |movie_count		|		prod_comp_rank|
+-------------------+-------------------+---------------------+
| The Archers		|		830			|		1	  		  |
|	.				|		.			|			.		  |
|	.				|		.			|			.		  |
+-------------------+-------------------+---------------------+*/
#------------------------------------------------------------------------------------------
#OUTPUT: 
WITH Top_PH AS (
			SELECT production_company,COUNT(id) Number_of_multilingual_movies,
			RANK() OVER(ORDER BY COUNT(id) DESC) AS Movie_Ranked
			FROM movie m
			INNER JOIN ratings r
			ON r.movie_id = m.id
			WHERE LOWER(languages) LIKE '%,%' AND production_company IS NOT NULL AND median_rating >=8
			GROUP BY production_company
			)
SELECT * FROM Top_PH
WHERE  MOvie_Ranked <3 

#IMPORTANT: The Main Learning here is using LIKE %,%  which which where ever the ',' is there it will be multi-lingual
# You can do the same using POSITION(',' IN language) >0

WITH Top_PH AS (
			SELECT production_company,COUNT(id) Number_of_multilingual_movies,
			RANK() OVER(ORDER BY COUNT(id) DESC) AS Movie_Ranked
			FROM movie m
			INNER JOIN ratings r
			ON r.movie_id = m.id
			WHERE POSITION(',' IN languages)>0 AND production_company IS NOT NULL AND median_rating >=8 # OPTIONAL WAY TO FILTER
			GROUP BY production_company
			)
SELECT * FROM Top_PH
WHERE  MOvie_Ranked <3 
        
# INSIGHT: Top 2 Production Houses- 'Star Cinema' with 7 HITS and Twentieth Century Fox with 4 HITS IN Multi: Language
 
 #-------------------------------------------------------------------------------------------------------------------------
 
 -- Q28. Who are the top 3 actresses based on number of Super Hit movies (average rating >8) in drama genre?
/* Output format:
+---------------+-------------------+---------------------+----------------------+-----------------+
| actress_name	|	total_votes		|	movie_count		  |actress_avg_rating	 |actress_rank	   |
+---------------+-------------------+---------------------+----------------------+-----------------+
|	Laura Dern	|			1016	|	       1		  |	   9.60			     |		1	       |
|		.		|			.		|	       .		  |	   .	    		 |		.	       |
|		.		|			.		|	       .		  |	   .	    		 |		.	       |
+---------------+-------------------+---------------------+----------------------+-----------------+*/

#---------------------------------------------------------------------------------------------------------
#Query :
#FILTERED QUERY using CTE
WITH Top_Actress AS (
			SELECT name Actress_Name,SUM(total_votes) Votes,COUNT(r.movie_id) Hit_Movies,
			ROUND(SUM(avg_rating*total_votes)/Sum(total_votes),2) as Actress_Avg_Rating
			FROM actor_names an
			INNER JOIN role_mapping rm
			ON rm.name_id = an.id
			INNER JOIN ratings r USING(movie_id)
			INNER JOIN genre g USING(movie_id)
			WHERE LOWER(category) = 'actress' AND avg_rating>=8 AND UPPER(genre) = 'DRAMA'
			GROUP BY name
			 )
SELECT *,
ROW_NUMBER() OVER (ORDER BY Hit_Movies DESC) Actress_Rank FROM Top_Actress 
LIMIT 3

# INSIGHTS : The Top 1 is An Indian Actress Nameed : Parvathy Thiruvothu and Its a  Proud Movment for a Drama genre.

#-------------------------------------THE LAST ANALYTICS--------------------------------------------------------------

/* Q29. Get the following details for top 9 directors (based on number of movies)
Director id
Name
Number of movies directed by these directors
Average inter movie duration in days OR average release interval in days
Average movie ratings OR  average/min/max ratings
Total votes
Min rating 
Max rating
total movie durations or cumulative film duration.

Format:
+---------------+-------------------+---------------------+----------------------+--------------+--------------+------------+------------+----------------+
| director_id	|	director_name	|	number_of_movies  |	avg_inter_movie_days |	avg_rating	| total_votes  | min_rating	| max_rating | total_duration |
+---------------+-------------------+---------------------+----------------------+--------------+--------------+------------+------------+----------------+
|nm1777967		|	A.L. Vijay		|			5		  |	       177			 |	   5.65	    |	1754	   |	3.7		|	6.9		 |		613		  |
|	.			|		.			|			.		  |	       .			 |	   .	    |	.		   |	.		|	.		 |		.		  |
|	.			|		.			|			.		  |	       .			 |	   .	    |	.		   |	.		|	.		 |		.		  |
|	.			|		.			|			.		  |	       .			 |	   .	    |	.		   |	.		|	.		 |		.		  |
|	.			|		.			|			.		  |	       .			 |	   .	    |	.		   |	.		|	.		 |		.		  |
|	.			|		.			|			.		  |	       .			 |	   .	    |	.		   |	.		|	.		 |		.		  |
|	.			|		.			|			.		  |	       .			 |	   .	    |	.		   |	.		|	.		 |		.		  |
|	.			|		.			|			.		  |	       .			 |	   .	    |	.		   |	.		|	.		 |		.		  |
|	.			|		.			|			.		  |	       .			 |	   .	    |	.		   |	.		|	.		 |		.		  |
+---------------+-------------------+---------------------+----------------------+--------------+--------------+------------+------------+----------------+

--------------------------------------------------------------------------------------------*/
#Query : 

WITH Movie_Date_CTE AS (
				SELECT dm.name_id as Director_ID,
                an.name AS Director_Name,
                dm.movie_id as MovieID,
                m.date_published Release_Date,
				LEAD(m.date_published,1)  OVER (PARTITION BY dm.name_id ORDER BY date_published,dm.movie_id) Next_Release_Date_by_Director,
				r.avg_rating AS Movie_Rating,
				r.total_votes AS Earned_Votes,
                m.duration as Movie_Time
				FROM director_mapping dm
				INNER JOIN actor_names an
					ON an.id = dm.name_id
				INNER JOIN movie m
					ON m.id = dm.movie_id
				INNER JOIN ratings r
					ON r.movie_id =m.id
                    ),
                    Top_Directors_CTE AS (
										SELECT *,DATEDIFF(Next_Release_Date_by_Director,Release_Date) AS Release_Interval_In_Days
                                        FROM Movie_Date_CTE
                                      )
SELECT Director_ID,
	   Director_Name,
       COUNT(MovieID) Movie_ID,
       ROUND(AVG(Release_Interval_In_Days),0) Average_Next_Release_Time_In_Days,
       ROUND(AVG(Movie_Rating),2) Avg_Movie_Rating,
       SUM(Earned_Votes) Total_Earned_Votes,
       MIN(Movie_Rating) AS Lowest_Rated_of_Director,
       MAX(Movie_Rating) AS Highest_Rated_of_Director,
       ROUND((SUM(Movie_Time)/60),2) AS Total_Movie_Time_Hrs
FROM  Top_Directors_CTE
GROUP BY Director_ID
ORDER BY   COUNT(MovieID) DESC
LIMIT 9 # FOR Top 9 Directors   

#INIGHTS: We have One Indian Director in the Top 9 list and At Rank 2 Name : A.L.Vijay directed 5 movies and Takes Avg 177 days
# to Make the Next Release ,with average movie rating of 5+ and Having JHihest Rating of 6.9 and Overall Time of the Movie Shooted tilldate 
# Is  10.22 hwich is Highest Among 9 Directors.

 
/*Created CTE date_published_info, used inner join to merge the tables and then wrote a query to fetch required variables*/                            
